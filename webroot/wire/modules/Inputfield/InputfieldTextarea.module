<?php

/**
 * An Inputfield for handling XHTML "textarea" form inputs
 *
 */
class InputfieldTextarea extends Inputfield {

	const defaultRows = 5; 

	public static function getModuleInfo() {
		return array(
			'title' => __('Textarea', __FILE__), // Module Title
			'summary' => __('Multiple lines of text', __FILE__), // Module Summary
			'version' => 100,
			'permanent' => true, 
			);
	}


	public function init() {
		parent::init();
		$this->setAttribute('rows', self::defaultRows); 
	}

	public function ___render() {

		$attrs = $this->getAttributes();
		unset($attrs['value']); 

		$out = 	"\n<textarea " . $this->getAttributesString($attrs) . ">" . 
			htmlspecialchars($this->value) . 
			"</textarea>";
		return $out; 
	}

	/**
	 * Render just the value (not input) in text/markup for presentation purposes
	 *
	 * @return string of text or markup where applicable
	 *
	 */
	public function ___renderValue() {
		$out = nl2br(htmlentities($this->attr('value'), ENT_QUOTES, "UTF-8"));
		return $out;
	}


	public function ___getConfigInputfields() {
		$inputfields = parent::___getConfigInputfields();

		$field = $this->modules->get('InputfieldInteger'); 
		$field->setAttribute('name', 'rows'); 
		$field->label = $this->_('Rows');
		$field->setAttribute('value', $this->attr('rows') > 0 ? $this->attr('rows') : self::defaultRows); 
		$field->setAttribute('size', 3); 
		$field->description = $this->_('The number of rows initially shown for this field.'); 
		$inputfields->append($field);

		return $inputfields; 
	}
}
